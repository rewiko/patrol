package it.unipr.ce.dsg.p2pgame.platform;

import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.Random;

import it.unipr.ce.dsg.p2pgame.util.SHA1;

/**
 *
 * Class that describe the attack action. It consists of type of resource,
 * quantity, time and hash. The hash is useful for fair if is necessary use a
 * turn-based approach during attack phase.
 *
 * @author Stefano Sebastio (stefano.sebastio@studenti.unipr.it)
 *
 */
public class Attack {

	/**
	 * The time instance on which is happen the attack
	 */
	private long time;

	/**
	 * The quantity of resource with which attack happen
	 */
	private double quantity;

	/**
	 * The type of resource used on attack
	 */
	private String type; //tipo di risorsa d'attacco
	//private String nameResource;

	/**
	 * Hash used on first-stage attack submission
	 */
	private String hash;

	/**
	 * The nonce used for ensure privacy
	 */
	private int nonce;

	/**
	 *
	 * Attack constructor used when attack is generated by local user.
	 * The nonce is generated randomly
	 *
	 * @param quantity the quantity of resource involved on attack
	 * @param type the type of resource used for attack
	 */
	public Attack(/*long time,*/ double quantity, String type) {
		super();
		this.time = System.currentTimeMillis();
		this.quantity = quantity;
		this.type = type;
		//this.nameResource = nameResource;

		Random ran = new Random();
		this.nonce = ran.nextInt();

		try {
			this.hash = SHA1.convertToHex(SHA1.calculateSHA1(this.type + "-" + this.quantity + "-" + this.nonce));
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 *
	 * Attack constructor used when attack is received by local user.
	 * The nonce is passed as argument
	 *
	 * @param quantity the quantity of resource involved on attack
	 * @param type the type of resource involved on attack
	 * @param nonce the nonce of attack that is received on previous attack-stage
	 */
	public Attack(double quantity, String type, int nonce) {
		super();
		this.time = System.currentTimeMillis();
		this.quantity = quantity;
		this.type = type;

		this.nonce = nonce;

		try {
			this.hash = SHA1.convertToHex(SHA1.calculateSHA1(this.type + "-" + this.quantity + "-" + this.nonce));
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	/**
	 *
	 * Get the time when an attack happen
	 *
	 * @return the time on milliseconds
	 */
	public long getTime() {
		return time;
	}

	/**
	 *
	 * Set a new time when an attack happen
	 *
	 * @param time the time of attack
	 */
	public void setTime(long time) {
		this.time = time;
	}

	/**
	 *
	 * Get the quantity of resource used on attack
	 *
	 * @return the resource quantity
	 */
	public double getQuantity() {
		return quantity;
	}

	/**
	 *
	 * Set a new quantity of resource
	 *
	 * @param quantity the resource used on attack
	 */
	public void setQuantity(double quantity) {
		this.quantity = quantity;
	}

	/**
	 *
	 * Get the type of resource used on attack
	 *
	 * @return the type of resource
	 */
	public String getType() {
		return type;
	}

	/**
	 *
	 * Set a new type of resource
	 *
	 * @param type the resource type
	 */
	public void setType(String type) {
		this.type = type;
	}

	/**
	 *
	 * Get the hash of attack
	 *
	 * @return the attack hash
	 */
	public String getHash() {
		return hash;
	}

	/**
	 *
	 * Set a new hash of attack
	 *
	 * @param hash the attack hash
	 */
	public void setHash(String hash) {
		this.hash = hash;
	}

	/**
	 *
	 * Get the nonce of attack
	 *
	 * @return the attack nonce
	 */
	public int getNonce() {
		return nonce;
	}

	/**
	 *
	 * Set a new nonce for attack
	 *
	 * @param nonce the nonce used on attack
	 */
	public void setNonce(int nonce) {
		this.nonce = nonce;
	}



}
